diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed5487..fdc3e69 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -160,6 +160,10 @@ extern "C" {
 #define MAP_ADD         147
 
 
+/* Glue together LOAD_FAST and LOAD_CONST to optimize recursive
+ * Fibonacci function */
+#define LOAD_OTUS 148
+
 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
 	     PyCmp_IN, PyCmp_NOT_IN, PyCmp_IS, PyCmp_IS_NOT, PyCmp_EXC_MATCH, PyCmp_BAD};
 
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365..d2a1229 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -188,5 +188,6 @@ def_op('EXTENDED_ARG', 145)
 EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
+def_op('LOAD_OTUS', 148)
 
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index 4e4adc2..97e1206 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1232,6 +1232,25 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             FAST_DISPATCH();
         }
 
+        TARGET(LOAD_OTUS)
+        {
+            x = GETLOCAL(0);
+            if (x != NULL) {
+                Py_INCREF(x);
+                PUSH(x);
+                x = GETITEM(consts, oparg);
+                Py_INCREF(x);
+                PUSH(x);
+                FAST_DISPATCH();
+            }
+            format_exc_check_arg(
+                PyExc_UnboundLocalError,
+                UNBOUNDLOCAL_ERROR_MSG,
+                PyTuple_GetItem(co->co_varnames, oparg)
+            );
+            break;
+        }
+
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
         {
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127..88b7869 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -1,5 +1,6 @@
 static void *opcode_targets[256] = {
     &&_unknown_opcode,
+    &&LOAD_OTUS,
     &&TARGET_POP_TOP,
     &&TARGET_ROT_TWO,
     &&TARGET_ROT_THREE,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f88..ac19880 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -425,6 +425,16 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                 cumlc = 0;
                 break;
 
+                /* Combine LOAD_FAST 0 and consequent LOAD_CNST j
+                   into LAOD_OTUS j */
+            case LOAD_FAST:
+                j = GETARG(codestr, i);
+                if (codestr[i+3] == LOAD_CONST && j == 0) {
+                    codestr[i+3] = LOAD_OTUS;
+                    memset(codestr+i, NOP, 3);
+                }
+                break;
+
                 /* Try to fold tuples of constants (includes a case for lists
                    which are only used for "in" and "not in" tests).
                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
